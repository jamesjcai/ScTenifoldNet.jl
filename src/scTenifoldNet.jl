module scTenifoldNet

using Statistics, LinearAlgebra, Distributions, MultipleTesting, Random
import TSVD
import TensorToolbox

export tenrnet, manialn, drgenes

const NCOMP1,NCOMP2=3,5
const NLAYERS,NCELLS=10,500

# vecnorm(x) = x./norm.(x[:,i] for i in 1:size(x,2))'
vecnorm(x) = norm.(x[:,i] for i in 1:size(x,2))
function vecnorm!(x)
    for i in 1:size(x,2)
        x[:,i]=x[:,i]./norm(x[:,i])
    end    
end


function pcnet(X::AbstractArray{T,N}, p::Int=3;
              scalein=false, scaleout=false, symmout=false) where N where T<:Real
    if scalein
        œÉ=std(X,dims=1)
        œÉ(œÉ.==0).=1
        X=(X.-mean(X,dims=1))./œÉ
    end
    ‚Ñä=size(X,2)
    A=1.0 .-Matrix(I,‚Ñä,‚Ñä)
    Threads.@threads for k in 1:‚Ñä
        y=X[:,k]
        ùí≥=X[:,1:end.‚â†k]
        œï=TSVD.tsvd(ùí≥,p)[3];
        s=ùí≥*œï
        s ./= (vecnorm(s).^2)'
        b=sum(y.*s,dims=1)
        ùí∑=œï*b'
        @inbounds A[k,A[k,:].==1.0]=ùí∑
    end
    if symmout
        A=0.5*(A+A')
    end
    if scaleout
        A=A./maximum(abs.(A))
    end
    return convert(Array{Float16,2},A)
  end

function tensordecomp(Œõ, p::Int64=5)
    ùíØ=TensorToolbox.cp_als(Œõ,p)
    ùïè=TensorToolbox.full(ùíØ)
    A=mean(ùïè[:,:,i] for i=1:size(ùïè,3))
    # A ./=maximum(abs.(A))
    # A=round.(A; digits=5)
    return A
end

function manialn(X,Y)
    Œº,dim=0.9,30
    n1,n2=size(X,1),size(Y,1);
    W‚ÇÅ,W‚ÇÇ=X.+1,Y.+1
    ‚Ñê=Matrix(I,n1,n2);
    Œº = Œº*(sum(W‚ÇÅ)+sum(W‚ÇÇ)/(2*sum(‚Ñê)));
    ùïé = [W‚ÇÅ Œº*‚Ñê; Œº*‚Ñê' W‚ÇÇ];
    L=diagm(vec(sum(abs.(ùïé),dims=1))).-ùïé;
    Œª,V = eigen(L);
    i=real(Œª).>=1e-8;
    V=real(V[:,i]);
    V=V[:,1:dim];    
    aln1=V[1:n1,:];
    aln2=V[n1+1:end,:];
    d = norm.((aln1.-aln2)[i,:] for i = 1:n1)
    # _,idx=findmax(dd)
    return d, aln1, aln2
end

function drgenes(d)
    d¬≤=d.^2
    FC=d¬≤./mean(d¬≤)
    pVals = ccdf.(Chisq(1),FC)
    pAdjusted = MultipleTesting.adjust(pVals, BenjaminiHochberg())
    return FC,pVals,pAdjusted
end

function tenrnet(X::AbstractMatrix{T}; donorm::Bool=true) where T
    ‚Ñä,ùí∏=size(X)
    if donorm
        lbsz=sum(X,dims=1)
        X=(X./lbsz)*median(lbsz)
        # X=(X./lbsz)*1e4
    end    
    A=zeros(Float16, ‚Ñä, ‚Ñä, NLAYERS)
    for k=1:NLAYERS
        println("network ... $k")
        ùï©=X[:,randperm(ùí∏)][:,1:NCELLS]
        @time @inbounds A[:,:,k]=pcnet(ùï©',NCOMP1)
    end
    Z=tensordecomp(A,NCOMP2)
    return Z
end

end # module
